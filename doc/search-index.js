var searchIndex = {};
searchIndex['jsonway'] = {"items":[[0,"","jsonway",""],[1,"JsonWay","",""],[0,"list_builder","",""],[1,"ListBuilder","jsonway::list_builder",""],[11,"null","","",0],[11,"skip","","",0],[11,"root","","",0],[10,"new","","",0],[10,"from_json","","Initialize builder with initial value.",0],[10,"build","","Create new ListBuilder, pass it to closure as mutable ref and return.",0],[10,"push_json","","Push JSON value to list.",0],[10,"list","","Create new list and push it.",0],[10,"object","","Create new object and push it",0],[10,"null","","It you call `null`, this list will be converted to null when converting\nto raw JSON value.",0],[10,"skip","","It you call `skip`, this list will be skipped.",0],[10,"root","","",0],[10,"has_root","","",0],[10,"unwrap","","Move out internal JSON value.",0],[10,"push","","Push to list something that can be converted to JSON.",0],[10,"objects","","Fill this list by objects builded from iterator.",0],[10,"lists","","",0],[10,"map","","Fill this list by JSON values builded from iterator.",0],[10,"to_json","","Copy self to new JSON instance.",0],[0,"object_builder","jsonway",""],[1,"ObjectBuilder","jsonway::object_builder",""],[11,"null","","",1],[11,"skip","","",1],[11,"root","","",1],[10,"new","","",1],[10,"from_json","","Initialize builder with initial value.",1],[10,"build","","Create new builder, pass it to closure as mutable ref and return.",1],[10,"null","","It you call `null`, this list will be converted to null.",1],[10,"skip","","It you call `skip`, this list will be skipped.",1],[10,"root","","",1],[10,"has_root","","",1],[10,"unwrap","","Move out internal JSON value.",1],[10,"set","","Set object's `name` field with something that can be\nconverted to Json value.",1],[10,"call","","Stub for future use",1],[10,"set_json","","Set object's `name` field with raw Json value.",1],[10,"list","","Build new list and set object's `name` field with it.",1],[10,"object","","Build new object and set object's `name` field with it.",1],[10,"to_json","","Copy self to new JSON instance.",1],[0,"mutable_json","jsonway",""],[6,"MutableJson","jsonway::mutable_json",""],[9,"as_object_mut","","",2],[9,"as_list_mut","","",2],[10,"as_object_mut","serialize::json","If the Json value is an Object, returns the associated TreeMap.\nReturns None otherwise.",3],[10,"as_list_mut","","",3],[0,"serializer","jsonway",""],[6,"Serializer","jsonway::serializer","Provides functionality to create custom JSON presenters for your structs.\n \n## Example \n \n```\nuse jsonway::{ObjectBuilder, Serializer};"],[9,"build","","",4],[10,"root","","",4],[10,"serialize","","",4],[6,"ObjectSerializer","","Provides functionality to create custom JSON presenters for your structs.\n \n## Example \n \n```\nuse jsonway::{ObjectBuilder, ObjectSerializer};"],[9,"build","","",5],[10,"root","","",5],[10,"serialize","","",5],[6,"ObjectScopeSerializer","","Provides functionality to create custom JSON presenters for your structs.\n \n## Example \n \n```rust\nuse jsonway::{ObjectBuilder, ObjectScopeSerializer};\n \nstruct User {\n    id: uint,\n    is_admin: bool\n}\n \nstruct Jedi {\n    name: String,\n    secret: String\n}\n \nstruct JediSerializer;\n \nimpl ObjectScopeSerializer<Jedi, User> for JediSerializer {\n    fn root(&self) -> Option<&str> { Some(\"jedi\") }\n    fn build(&self, jedi: &Jedi, current_user: &User, json: &mut ObjectBuilder) {\n        json.set(\"name\", jedi.name.to_string());\n \n        if current_user.is_admin {\n            json.set(\"secret\", jedi.secret.to_string());\n        }\n    }\n}\n \nlet jedi = Jedi { \n    name: \"Palpatine\".to_string(), \n    secret: \"Dark side\".to_string() \n};"],[9,"build","","",6],[10,"root","","",6],[10,"serialize","","",6],[0,"list_serializer","jsonway",""],[6,"ListSerializer","jsonway::list_serializer",""],[9,"build","","",7],[10,"root","","",7],[10,"meta","","",7],[10,"serialize","","",7],[10,"list","jsonway","Create and return new ListBuilder",8],[10,"object","","Create and return new ObjectBuilder",8]],"paths":[[1,"ListBuilder"],[1,"ObjectBuilder"],[6,"MutableJson"],[2,"Json"],[6,"Serializer"],[6,"ObjectSerializer"],[6,"ObjectScopeSerializer"],[6,"ListSerializer"],[1,"JsonWay"]]};
initSearch(searchIndex);
